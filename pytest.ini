[pytest]
# Use asyncio mode for all async tests
# This is often default with pytest-asyncio but explicit can be good.
asyncio_mode = auto

# Add environment variables for tests if needed, e.g., specific settings
# env =
#     MY_SETTING = test_value

# Configure test paths, markers, etc.
python_files = test_*.py Test*.py *_test.py
python_classes = Test*
python_functions = test_*

# If using a file-based test database, you might want to exclude it from linters/coverage
# (e.g., test_db.sqlite3)
norecursedirs = .git __pycache__ venv node_modules media data_to_import .vscode

# Recommended: Add logging configuration for tests to see logs during test runs
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_auto_indent = true
pythonpath = . src # Add src to pythonpath to help with imports like src.backend.main

markers =
    asyncio: mark a test as requiring asyncio.
    # Add other custom markers here if you use them.

# Default options
addopts = --color=yes --cov=src/backend --cov-report=term-missing --cov-report=html -p no:warnings
# --cov=src/backend: Measure coverage for the backend code.
# --cov-report=term-missing: Show missing lines in terminal.
# --cov-report=html: Generate an HTML coverage report in htmlcov/ directory.
# -p no:warnings: Suppress common warnings categories if they are noisy, or specify categories.
# Filter specific warnings if needed:
# filterwarnings =
# ignore::UserWarning
# ignore::DeprecationWarning

[coverage:run]
source = src/backend
omit =
    src/backend/main.py # Often main.py has boilerplate or things hard to cover without full E2E
    src/backend/seed.py # Seeding scripts are usually run manually, not part of unit/integration tests
    src/backend/import_utils.py # Can be tested indirectly via API, or with dedicated unit tests
    # Add other files/patterns to omit from coverage if they are not testable or out of scope.
    */__init__.py
    */models.py # Tortoise models can be hard to cover fully with unit tests for all ORM features.

[coverage:report]
show_missing = True
skip_covered = False
# Fail if coverage is below a certain threshold (e.g., 80%)
# fail_under = 80

# You might need to install pytest-cov: pip install pytest-cov
# The 'addopts' line assumes pytest-cov is installed.
# If not, remove --cov options or install it.
